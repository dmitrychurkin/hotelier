// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type ResetPasswordCreds struct {
	Email string `json:"email"`
}

type User struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	FirstName *string   `json:"firstName"`
	LastName  *string   `json:"lastName"`
	Role      UserRoles `json:"role"`
	CreatedAt string    `json:"createdAt"`
	UpdatedAt string    `json:"updatedAt"`
}

type UserRoles string

const (
	UserRolesAdmin    UserRoles = "ADMIN"
	UserRolesOwner    UserRoles = "OWNER"
	UserRolesEmployer UserRoles = "EMPLOYER"
)

var AllUserRoles = []UserRoles{
	UserRolesAdmin,
	UserRolesOwner,
	UserRolesEmployer,
}

func (e UserRoles) IsValid() bool {
	switch e {
	case UserRolesAdmin, UserRolesOwner, UserRolesEmployer:
		return true
	}
	return false
}

func (e UserRoles) String() string {
	return string(e)
}

func (e *UserRoles) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRoles(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRoles", str)
	}
	return nil
}

func (e UserRoles) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
